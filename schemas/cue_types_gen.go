// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package schema

// ProjectConfig defines project-level configuration for Catalyst Forge.
// This is the configuration for an individual project within a repository.
type ProjectConfig struct {
	Name string `json:"name"`

	Phases map[string]PhaseParticipation `json:"phases"`

	Artifacts struct {
	} `json:"artifacts"`

	Release *ReleaseConfig `json:"release,omitempty"`

	Deploy *DeploymentConfig `json:"deploy,omitempty"`
}

// PhaseParticipation defines how a project participates in a specific phase.
// Contains the steps to execute during that phase.
type PhaseParticipation struct {
	Steps []Step `json:"steps"`
}

// EarthlyStep defines a step that executes an Earthly target.
// Discriminated by action!: "earthly".
type EarthlyStep struct {
	Name string `json:"name"`

	Action string `json:"action"`

	Target string `json:"target"`

	Timeout string `json:"timeout,omitempty"`
}

// Step is a discriminated union of all step types.
// MVP: earthly only
// Future: can extend with | #DockerStep | #ShellStep, etc.
type Step EarthlyStep

// ReleaseConfig defines when and how releases should be triggered.
type ReleaseConfig struct {
	On []ReleaseTrigger `json:"on"`
}

// ReleaseTrigger defines a condition that triggers a release.
// At least one field should be specified.
type ReleaseTrigger struct {
	Branch string `json:"branch,omitempty"`

	Tag bool `json:"tag,omitempty"`

	Manual bool `json:"manual,omitempty"`
}

// DeploymentConfig defines Kubernetes resources to deploy.
type DeploymentConfig struct {
	Resources []K8sResource `json:"resources"`
}

// K8sResource defines a Kubernetes resource manifest.
// Uses flexible map structure for metadata and spec to support any K8s resource type.
type K8sResource struct {
	ApiVersion string `json:"apiVersion"`

	Kind string `json:"kind"`

	Metadata map[string]any/* CUE top */ `json:"metadata"`

	Spec map[string]any/* CUE top */ `json:"spec"`
}

// RepoConfig defines repository-level configuration for Catalyst Forge.
// This is the root configuration for an entire repository.
type RepoConfig struct {
	ForgeVersion string `json:"forgeVersion"`

	Tagging TaggingStrategy `json:"tagging"`

	Phases struct {
	} `json:"phases"`

	Publishers struct {
	} `json:"publishers"`
}

// TaggingStrategy defines how git tags should be applied in the repository.
type TaggingStrategy struct {
	Strategy string `json:"strategy"`
}
