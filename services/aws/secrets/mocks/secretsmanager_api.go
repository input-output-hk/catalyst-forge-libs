// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/input-output-hk/catalyst-forge-libs/services/aws/secrets"
)

// Ensure, that ManagerAPIMock does implement secrets.ManagerAPI.
// If this is not the case, regenerate this file with moq.
var _ secrets.ManagerAPI = &ManagerAPIMock{}

// ManagerAPIMock is a mock implementation of secrets.ManagerAPI.
//
//	func TestSomethingThatUsesManagerAPI(t *testing.T) {
//
//		// make and configure a mocked secrets.ManagerAPI
//		mockedManagerAPI := &ManagerAPIMock{
//			CreateSecretFunc: func(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error) {
//				panic("mock out the CreateSecret method")
//			},
//			DescribeSecretFunc: func(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error) {
//				panic("mock out the DescribeSecret method")
//			},
//			GetSecretValueFunc: func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
//				panic("mock out the GetSecretValue method")
//			},
//			PutSecretValueFunc: func(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error) {
//				panic("mock out the PutSecretValue method")
//			},
//		}
//
//		// use mockedManagerAPI in code that requires secrets.ManagerAPI
//		// and then make assertions.
//
//	}
type ManagerAPIMock struct {
	// CreateSecretFunc mocks the CreateSecret method.
	CreateSecretFunc func(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error)

	// DescribeSecretFunc mocks the DescribeSecret method.
	DescribeSecretFunc func(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error)

	// GetSecretValueFunc mocks the GetSecretValue method.
	GetSecretValueFunc func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error)

	// PutSecretValueFunc mocks the PutSecretValue method.
	PutSecretValueFunc func(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSecret holds details about calls to the CreateSecret method.
		CreateSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.CreateSecretInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// DescribeSecret holds details about calls to the DescribeSecret method.
		DescribeSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.DescribeSecretInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// GetSecretValue holds details about calls to the GetSecretValue method.
		GetSecretValue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.GetSecretValueInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
		// PutSecretValue holds details about calls to the PutSecretValue method.
		PutSecretValue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *secretsmanager.PutSecretValueInput
			// OptFns is the optFns argument value.
			OptFns []func(*secretsmanager.Options)
		}
	}
	lockCreateSecret   sync.RWMutex
	lockDescribeSecret sync.RWMutex
	lockGetSecretValue sync.RWMutex
	lockPutSecretValue sync.RWMutex
}

// CreateSecret calls CreateSecretFunc.
func (mock *ManagerAPIMock) CreateSecret(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error) {
	if mock.CreateSecretFunc == nil {
		panic("ManagerAPIMock.CreateSecretFunc: method is nil but ManagerAPI.CreateSecret was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.CreateSecretInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSecret.Lock()
	mock.calls.CreateSecret = append(mock.calls.CreateSecret, callInfo)
	mock.lockCreateSecret.Unlock()
	return mock.CreateSecretFunc(ctx, params, optFns...)
}

// CreateSecretCalls gets all the calls that were made to CreateSecret.
// Check the length with:
//
//	len(mockedManagerAPI.CreateSecretCalls())
func (mock *ManagerAPIMock) CreateSecretCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.CreateSecretInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.CreateSecretInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockCreateSecret.RLock()
	calls = mock.calls.CreateSecret
	mock.lockCreateSecret.RUnlock()
	return calls
}

// DescribeSecret calls DescribeSecretFunc.
func (mock *ManagerAPIMock) DescribeSecret(ctx context.Context, params *secretsmanager.DescribeSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DescribeSecretOutput, error) {
	if mock.DescribeSecretFunc == nil {
		panic("ManagerAPIMock.DescribeSecretFunc: method is nil but ManagerAPI.DescribeSecret was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.DescribeSecretInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSecret.Lock()
	mock.calls.DescribeSecret = append(mock.calls.DescribeSecret, callInfo)
	mock.lockDescribeSecret.Unlock()
	return mock.DescribeSecretFunc(ctx, params, optFns...)
}

// DescribeSecretCalls gets all the calls that were made to DescribeSecret.
// Check the length with:
//
//	len(mockedManagerAPI.DescribeSecretCalls())
func (mock *ManagerAPIMock) DescribeSecretCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.DescribeSecretInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.DescribeSecretInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockDescribeSecret.RLock()
	calls = mock.calls.DescribeSecret
	mock.lockDescribeSecret.RUnlock()
	return calls
}

// GetSecretValue calls GetSecretValueFunc.
func (mock *ManagerAPIMock) GetSecretValue(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
	if mock.GetSecretValueFunc == nil {
		panic("ManagerAPIMock.GetSecretValueFunc: method is nil but ManagerAPI.GetSecretValue was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.GetSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetSecretValue.Lock()
	mock.calls.GetSecretValue = append(mock.calls.GetSecretValue, callInfo)
	mock.lockGetSecretValue.Unlock()
	return mock.GetSecretValueFunc(ctx, params, optFns...)
}

// GetSecretValueCalls gets all the calls that were made to GetSecretValue.
// Check the length with:
//
//	len(mockedManagerAPI.GetSecretValueCalls())
func (mock *ManagerAPIMock) GetSecretValueCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.GetSecretValueInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.GetSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockGetSecretValue.RLock()
	calls = mock.calls.GetSecretValue
	mock.lockGetSecretValue.RUnlock()
	return calls
}

// PutSecretValue calls PutSecretValueFunc.
func (mock *ManagerAPIMock) PutSecretValue(ctx context.Context, params *secretsmanager.PutSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.PutSecretValueOutput, error) {
	if mock.PutSecretValueFunc == nil {
		panic("ManagerAPIMock.PutSecretValueFunc: method is nil but ManagerAPI.PutSecretValue was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *secretsmanager.PutSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutSecretValue.Lock()
	mock.calls.PutSecretValue = append(mock.calls.PutSecretValue, callInfo)
	mock.lockPutSecretValue.Unlock()
	return mock.PutSecretValueFunc(ctx, params, optFns...)
}

// PutSecretValueCalls gets all the calls that were made to PutSecretValue.
// Check the length with:
//
//	len(mockedManagerAPI.PutSecretValueCalls())
func (mock *ManagerAPIMock) PutSecretValueCalls() []struct {
	Ctx    context.Context
	Params *secretsmanager.PutSecretValueInput
	OptFns []func(*secretsmanager.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *secretsmanager.PutSecretValueInput
		OptFns []func(*secretsmanager.Options)
	}
	mock.lockPutSecretValue.RLock()
	calls = mock.calls.PutSecretValue
	mock.lockPutSecretValue.RUnlock()
	return calls
}
